// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Telegram WebApp –≥–æ—Ç–æ–≤
if (window.Telegram && window.Telegram.WebApp) {
    window.Telegram.WebApp.ready();
    window.Telegram.WebApp.expand();
    console.log("Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
} else {
    console.log("Telegram WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ");
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
const FIELD_SIZE = 8;
const MINES_COUNT = 10;
const POINTS_PER_CELL = 10;
let field = [];
let revealed = [];
let gameOver = false;
let score = 0;

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const gameField = document.getElementById('gameField');
const scoreDiv = document.getElementById('score');
const buttonContainer = document.getElementById('buttonContainer');
const leaderboardDiv = document.getElementById('leaderboard');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
function createButton(text, onClick) {
    const button = document.createElement('button');
    button.textContent = text;
    button.addEventListener('click', onClick);
    buttonContainer.appendChild(button);
    return button;
}

// –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
createButton('–ù–æ–≤–∞—è –∏–≥—Ä–∞', startGame);
createButton('–†–µ–π—Ç–∏–Ω–≥', showLeaderboard);

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
function getUserInfo() {
    if (window.Telegram && window.Telegram.WebApp.initDataUnsafe?.user) {
        const user = window.Telegram.WebApp.initDataUnsafe.user;
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º username, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (user.username) {
            return {
                username: user.username,
                first_name: user.first_name || user.username
            };
        } else {
            // –ï—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º first_name –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            return {
                username: user.first_name || `anonymous_${Math.random().toString(36).substr(2, 9)}`,
                first_name: user.first_name || '–ê–Ω–æ–Ω–∏–º'
            };
        }
    } else {
        // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        return {
            username: `anonymous_${Math.random().toString(36).substr(2, 9)}`,
            first_name: '–ê–Ω–æ–Ω–∏–º'
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è —Å –º–∏–Ω–∞–º–∏
function createField() {
    field = Array(FIELD_SIZE).fill().map(() => Array(FIELD_SIZE).fill(0));
    revealed = Array(FIELD_SIZE).fill().map(() => Array(FIELD_SIZE).fill(false));
    let mines = 0;
    while (mines < MINES_COUNT) {
        const x = Math.floor(Math.random() * FIELD_SIZE);
        const y = Math.floor(Math.random() * FIELD_SIZE);
        if (field[x][y] !== 'üí£') {
            field[x][y] = 'üí£';
            mines++;
            for (let dx = -1; dx <= 1; dx++) {
                for (let dy = -1; dy <= 1; dy++) {
                    const newX = x + dx;
                    const newY = y + dy;
                    if (newX >= 0 && newX < FIELD_SIZE && newY >= 0 && newY < FIELD_SIZE && field[newX][newY] !== 'üí£') {
                        field[newX][newY]++;
                    }
                }
            }
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
function renderField() {
    gameField.innerHTML = '';
    gameField.style.gridTemplateColumns = `repeat(${FIELD_SIZE}, 40px)`;
    for (let i = 0; i < FIELD_SIZE; i++) {
        for (let j = 0; j < FIELD_SIZE; j++) {
            const cell = document.createElement('div');
            cell.className = 'cell';
            if (revealed[i][j]) {
                cell.classList.add('revealed');
                if (field[i][j] === 'üí£') {
                    cell.classList.add('bomb');
                    cell.textContent = 'üí£';
                } else {
                    cell.textContent = field[i][j] === 0 ? '' : field[i][j];
                }
            }
            cell.addEventListener('click', () => openCell(i, j));
            gameField.appendChild(cell);
        }
    }
    updateScore();
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è —è—á–µ–π–∫–∏
function openCell(x, y) {
    if (gameOver || revealed[x][y]) return;
    revealed[x][y] = true;
    if (field[x][y] === 'üí£') {
        gameOver = true;
        alert(`–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í–∞—à —Å—á—ë—Ç: ${score}`);
        saveScore();
        revealAll();
    } else {
        score += POINTS_PER_CELL;
        if (field[x][y] === 0) {
            for (let dx = -1; dx <= 1; dx++) {
                for (let dy = -1; dy <= 1; dy++) {
                    const newX = x + dx;
                    const newY = y + dy;
                    if (newX >= 0 && newX < FIELD_SIZE && newY >= 0 && newY < FIELD_SIZE) {
                        openCell(newX, newY);
                    }
                }
            }
        }
        renderField();
        checkWin();
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –º–∏–Ω
function revealAll() {
    for (let i = 0; i < FIELD_SIZE; i++) {
        for (let j = 0; j < FIELD_SIZE; j++) {
            revealed[i][j] = true;
        }
    }
    renderField(); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª–µ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ—Ç—Å—è
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–±–µ–¥—ã
function checkWin() {
    let unrevealed = 0;
    for (let i = 0; i < FIELD_SIZE; i++) {
        for (let j = 0; j < FIELD_SIZE; j++) {
            if (!revealed[i][j] && field[i][j] !== 'üí£') unrevealed++;
        }
    }
    if (unrevealed === 0) {
        gameOver = true;
        alert(`–ü–æ–±–µ–¥–∞! –í–∞—à —Å—á—ë—Ç: ${score}`);
        saveScore();
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
function updateScore() {
    scoreDiv.textContent = `–°—á—ë—Ç: ${score}`;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á—ë—Ç–∞ –≤ Firebase –ø–æ username —Å –æ—Ç–ª–∞–¥–∫–æ–π
function saveScore() {
    const user = getUserInfo();
    console.log("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—á—ë—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user);
    const userRef = ref(window.db, `players/${user.username}`);
    get(userRef).then(snapshot => {
        let currentScore = snapshot.exists() ? snapshot.val().totalScore || 0 : 0;
        console.log("–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç –≤ –±–∞–∑–µ:", currentScore);
        update(userRef, {
            username: user.username,
            totalScore: currentScore + score,
            first_name: user.first_name
        }).then(() => {
            console.log("–°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è:", user.username);
        }).catch(error => {
            console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á—ë—Ç–∞:", error);
        });
    }).catch(error => console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Firebase:", error));
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ username
function showLeaderboard() {
    leaderboardDiv.style.display = 'block';
    leaderboardDiv.innerHTML = '<h3>–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤</h3>';
    get(ref(window.db, 'players')).then(snapshot => {
        if (snapshot.exists()) {
            const players = snapshot.val();
            const sortedPlayers = Object.entries(players)
                .sort((a, b) => b[1].totalScore - a[1].totalScore)
                .slice(0, 10);
            if (sortedPlayers.length > 0) {
                sortedPlayers.forEach(([username, data]) => {
                    leaderboardDiv.innerHTML += `<p>${data.first_name || username}: ${data.totalScore}</p>`;
                });
            } else {
                leaderboardDiv.innerHTML += '<p>–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤</p>';
            }
        } else {
            leaderboardDiv.innerHTML += '<p>–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤</p>';
        }
        const closeButton = createButton('–ó–∞–∫—Ä—ã—Ç—å', () => leaderboardDiv.style.display = 'none');
        leaderboardDiv.appendChild(closeButton);
    }).catch(error => {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:", error);
        leaderboardDiv.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞</p>';
    });
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
function startGame() {
    gameOver = false;
    score = 0;
    createField();
    renderField();
    leaderboardDiv.style.display = 'none';
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', startGame);

// –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ç–µ–º—ã –ø–æ–¥ Telegram
if (window.Telegram && window.Telegram.WebApp.themeParams) {
    const theme = window.Telegram.WebApp.themeParams;
    if (theme.bg_color) document.body.style.backgroundColor = theme.bg_color;
    if (theme.text_color) document.body.style.color = theme.text_color;
    if (theme.button_color) {
        const buttons = document.querySelectorAll('button');
        buttons.forEach(button => button.style.backgroundColor = theme.button_color);
    }
}
