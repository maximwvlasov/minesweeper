// –ñ–¥—ë–º, –ø–æ–∫–∞ Telegram WebApp –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
function waitForTelegram() {
    return new Promise((resolve) => {
        const checkTelegram = setInterval(() => {
            if (window.Telegram && window.Telegram.WebApp) {
                clearInterval(checkTelegram);
                resolve();
            }
        }, 100);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ URL
function getUrlParams() {
    const params = new URLSearchParams(window.location.search);
    return {
        username: params.get('username') || `anonymous_${Math.random().toString(36).substr(2, 9)}`,
        first_name: params.get('first_name') || '–ê–Ω–æ–Ω–∏–º'
    };
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
const FIELD_SIZE = 8;
const MINES_COUNT = 10;
const POINTS_PER_CELL = 10;
let field = [];
let revealed = [];
let gameOver = false;
let score = 0;

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
let gameField, scoreDiv, buttonContainer, leaderboardDiv;

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
let userInfo = null;

waitForTelegram().then(() => {
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ URL
    userInfo = getUrlParams();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ Telegram
    gameField = document.getElementById('gameField');
    scoreDiv = document.getElementById('score');
    buttonContainer = document.getElementById('buttonContainer');
    leaderboardDiv = document.getElementById('leaderboard');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Firebase
    if (!window.db || !window.firebaseFunctions) {
        console.error("Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ HTML.");
        return;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    function createButton(text, onClick) {
        const button = document.createElement('button');
        button.textContent = text;
        button.addEventListener('click', onClick);
        buttonContainer.appendChild(button);
        return button;
    }

    // –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
    createButton('–ù–æ–≤–∞—è –∏–≥—Ä–∞', startGame);
    createButton('–†–µ–π—Ç–∏–Ω–≥', showLeaderboard);

    // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è —Å –º–∏–Ω–∞–º–∏
    function createField() {
        field = Array(FIELD_SIZE).fill().map(() => Array(FIELD_SIZE).fill(0));
        revealed = Array(FIELD_SIZE).fill().map(() => Array(FIELD_SIZE).fill(false));
        let mines = 0;
        while (mines < MINES_COUNT) {
            const x = Math.floor(Math.random() * FIELD_SIZE);
            const y = Math.floor(Math.random() * FIELD_SIZE);
            if (field[x][y] !== 'üí£') {
                field[x][y] = 'üí£';
                mines++;
                for (let dx = -1; dx <= 1; dx++) {
                    for (let dy = -1; dy <= 1; dy++) {
                        const newX = x + dx;
                        const newY = y + dy;
                        if (newX >= 0 && newX < FIELD_SIZE && newY >= 0 && newY < FIELD_SIZE && field[newX][newY] !== 'üí£') {
                            field[newX][newY]++;
                        }
                    }
                }
            }
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    function renderField() {
        gameField.innerHTML = '';
        gameField.style.gridTemplateColumns = `repeat(${FIELD_SIZE}, 40px)`;
        for (let i = 0; i < FIELD_SIZE; i++) {
            for (let j = 0; j < FIELD_SIZE; j++) {
                const cell = document.createElement('div');
                cell.className = 'cell';
                if (revealed[i][j]) {
                    cell.classList.add('revealed');
                    if (field[i][j] === 'üí£') {
                        cell.classList.add('bomb');
                        cell.textContent = 'üí£';
                    } else {
                        cell.textContent = field[i][j] === 0 ? '' : field[i][j];
                    }
                }
                cell.addEventListener('click', () => openCell(i, j));
                gameField.appendChild(cell);
            }
        }
        updateScore();
    }

    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è —è—á–µ–π–∫–∏
    function openCell(x, y) {
        if (gameOver || revealed[x][y]) return;
        revealed[x][y] = true;
        if (field[x][y] === 'üí£') {
            gameOver = true;
            saveScore().then(totalScore => {
                showGameResult(score, totalScore);
            });
            revealAll();
        } else {
            score += POINTS_PER_CELL;
            if (field[x][y] === 0) {
                for (let dx = -1; dx <= 1; dx++) {
                    for (let dy = -1; dy <= 1; dy++) {
                        const newX = x + dx;
                        const newY = y + dy;
                        if (newX >= 0 && newX < FIELD_SIZE && newY >= 0 && newY < FIELD_SIZE) {
                            openCell(newX, newY);
                        }
                    }
                }
            }
            renderField();
            checkWin();
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –º–∏–Ω
    function revealAll() {
        for (let i = 0; i < FIELD_SIZE; i++) {
            for (let j = 0; j < FIELD_SIZE; j++) {
                revealed[i][j] = true;
            }
        }
        renderField(); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª–µ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏—Ä—É–µ—Ç—Å—è
    }

    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–±–µ–¥—ã
    function checkWin() {
        let unrevealed = 0;
        for (let i = 0; i < FIELD_SIZE; i++) {
            for (let j = 0; j < FIELD_SIZE; j++) {
                if (!revealed[i][j] && field[i][j] !== 'üí£') unrevealed++;
            }
        }
        if (unrevealed === 0) {
            gameOver = true;
            saveScore().then(totalScore => {
                showGameResult(score, totalScore);
            });
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    function updateScore() {
        scoreDiv.textContent = `–°—á—ë—Ç: ${score}`;
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
    function showGameResult(finalScore, totalScore) {
        window.Telegram.WebApp.showPopup({
            title: '–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã',
            message: `–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í–∞—à —Å—á—ë—Ç –≤ —ç—Ç–æ–π –∏–≥—Ä–µ: ${finalScore}\n–û–±—â–∞—è —Å—É–º–º–∞ –æ—á–∫–æ–≤: ${totalScore}`,
            buttons: [
                { id: 'playAgain', type: 'ok', text: '–ï—â—ë –∏–≥—Ä–∞—Ç—å' }
            ]
        }, (btn) => {
            if (btn.id === 'playAgain') {
                startGame(); // –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
            }
        });
    }

    // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á—ë—Ç–∞ –≤ Firebase –ø–æ username —Å –æ—Ç–ª–∞–¥–∫–æ–π (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –æ—á–∫–æ–≤)
    function saveScore() {
        return new Promise((resolve) => {
            if (!userInfo) {
                console.error("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!");
                resolve(0);
                return;
            }
            console.log("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—á—ë—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userInfo);
            if (!window.db || !window.firebaseFunctions) {
                console.error("Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ HTML.");
                resolve(0);
                return;
            }
            const { ref, get, update } = window.firebaseFunctions;
            const userRef = ref(window.db, `players/${userInfo.username}`);
            get(userRef).then(snapshot => {
                let currentScore = snapshot.exists() ? snapshot.val().totalScore || 0 : 0;
                console.log("–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç –≤ –±–∞–∑–µ:", currentScore);
                update(userRef, {
                    username: userInfo.username,
                    totalScore: currentScore + score,
                    first_name: userInfo.first_name
                }).then(() => {
                    console.log("–°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è:", userInfo.username);
                    resolve(currentScore + score); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—É—é —Å—É–º–º—É –æ—á–∫–æ–≤
                }).catch(error => {
                    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á—ë—Ç–∞:", error);
                    resolve(0);
                });
            }).catch(error => {
                console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Firebase:", error);
                resolve(0);
            });
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ username
    function showLeaderboard() {
        leaderboardDiv.style.display = 'block';
        leaderboardDiv.innerHTML = '<h3>–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤</h3>';
        if (!window.db || !window.firebaseFunctions) {
            console.error("Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ HTML.");
            leaderboardDiv.innerHTML += '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞</p>';
            return;
        }
        const { ref, get } = window.firebaseFunctions;
        get(ref(window.db, 'players')).then(snapshot => {
            if (snapshot.exists()) {
                const players = snapshot.val();
                const sortedPlayers = Object.entries(players)
                    .sort((a, b) => b[1].totalScore - a[1].totalScore)
                    .slice(0, 10);
                if (sortedPlayers.length > 0) {
                    sortedPlayers.forEach(([username, data]) => {
                        leaderboardDiv.innerHTML += `<p>${data.first_name || username}: ${data.totalScore}</p>`;
                    });
                } else {
                    leaderboardDiv.innerHTML += '<p>–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤</p>';
                }
            } else {
                leaderboardDiv.innerHTML += '<p>–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤</p>';
            }
            const closeButton = createButton('–ó–∞–∫—Ä—ã—Ç—å', () => leaderboardDiv.style.display = 'none');
            leaderboardDiv.appendChild(closeButton);
        }).catch(error => {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:", error);
            leaderboardDiv.innerHTML += '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞</p>';
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    function startGame() {
        if (!userInfo) {
            console.error("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞! –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –∏–º—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞.");
            return;
        }
        gameOver = false;
        score = 0;
        createField();
        renderField();
        leaderboardDiv.style.display = 'none';
    }

    // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    document.addEventListener('DOMContentLoaded', startGame);

    // –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ç–µ–º—ã –ø–æ–¥ Telegram
    if (window.Telegram && window.Telegram.WebApp.themeParams) {
        const theme = window.Telegram.WebApp.themeParams;
        if (theme.bg_color) document.body.style.backgroundColor = theme.bg_color;
        if (theme.text_color) document.body.style.color = theme.text_color;
        if (theme.button_color) {
            const buttons = document.querySelectorAll('button');
            buttons.forEach(button => button.style.backgroundColor = theme.button_color);
        }
    }
}).catch(error => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã:", error));
