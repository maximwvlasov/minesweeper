// –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ Telegram WebApp
function waitForTelegram() {
    return new Promise((resolve) => {
        const checkTelegram = setInterval(() => {
            if (window.Telegram && window.Telegram.WebApp) {
                clearInterval(checkTelegram);
                resolve();
            }
        }, 100);
    });
}

waitForTelegram().then(() => {
    console.log("Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    const startButton = document.getElementById('start-button');
    const startMenu = document.getElementById('start-menu');
    const minesweeperLaunch = document.getElementById('minesweeper-launch');
    const gameContainer = document.getElementById('game-container');
    const taskbar = document.getElementById('taskbar');
    const gameField = document.getElementById('gameField');
    const score = document.getElementById('score');
    const buttonContainer = document.getElementById('buttonContainer');

    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ taskbar –∏ startButton –≤–∏–¥–Ω—ã, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∫—Ä—ã—Ç—ã
    taskbar.style.display = 'flex';
    startMenu.style.display = 'none';
    gameContainer.style.display = 'none';

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Start"
    startButton.addEventListener('click', () => {
        startMenu.style.display = startMenu.style.display === 'block' ? 'none' : 'block';
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–∞–ø—ë—Ä" –≤ –º–µ–Ω—é
    minesweeperLaunch.addEventListener('click', () => {
        startMenu.style.display = 'none';
        gameContainer.style.display = 'block';

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
        initializeGame();
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã
    function initializeGame() {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è
        gameField.innerHTML = '';
        score.textContent = '–°—á—ë—Ç: 0';

        // –°–æ–∑–¥–∞—ë–º —Å–µ—Ç–∫—É 10x10 (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã)
        const rows = 10;
        const cols = 10;
        const totalCells = rows * cols;
        const bombCount = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –º–∏–Ω
        const bombs = new Set();
        while (bombs.size < bombCount) {
            bombs.add(Math.floor(Math.random() * totalCells));
        }

        // –°–æ–∑–¥–∞—ë–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        for (let i = 0; i < rows; i++) {
            for (let j = 0; j < cols; j++) {
                const cell = document.createElement('div');
                cell.className = 'cell';
                cell.dataset.row = i;
                cell.dataset.col = j;
                const cellIndex = i * cols + j;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —è—á–µ–π–∫–∞ –º–∏–Ω–æ–π
                if (bombs.has(cellIndex)) {
                    cell.dataset.isBomb = true;
                }

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
                cell.addEventListener('click', handleCellClick);
                gameField.appendChild(cell);
            }
        }

        // –°—Ç–∏–ª–∏–∑—É–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –∫–∞–∫ —Å–µ—Ç–∫—É
        gameField.style.gridTemplateColumns = `repeat(${cols}, 32px)`;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
    function handleCellClick(event) {
        const cell = event.target;
        if (cell.classList.contains('revealed')) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —è—á–µ–π–∫–∏

        cell.classList.add('revealed');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —è—á–µ–π–∫–∞ –º–∏–Ω–æ–π
        if (cell.dataset.isBomb) {
            cell.classList.add('bomb');
            cell.textContent = 'üí£';
            alert('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ù–∞–∂–º–∏—Ç–µ "Start" –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.');
            resetGame();
        } else {
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤–æ–∫—Ä—É–≥ (–ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
            const row = parseInt(cell.dataset.row);
            const col = parseInt(cell.dataset.col);
            let bombCount = 0;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —è—á–µ–π–∫–∏
            for (let i = -1; i <= 1; i++) {
                for (let j = -1; j <= 1; j++) {
                    const newRow = row + i;
                    const newCol = col + j;
                    if (newRow >= 0 && newRow < 10 && newCol >= 0 && newCol < 10) {
                        const neighbor = document.querySelector(`[data-row="${newRow}"][data-col="${newCol}"]`);
                        if (neighbor && neighbor.dataset.isBomb) {
                            bombCount++;
                        }
                    }
                }
            }

            if (bombCount > 0) {
                cell.textContent = bombCount;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É (–≤—Å–µ —è—á–µ–π–∫–∏ –±–µ–∑ –º–∏–Ω –æ—Ç–∫—Ä—ã—Ç—ã)
            checkWin();
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–±–µ–¥—ã
    function checkWin() {
        const cells = document.querySelectorAll('.cell');
        let revealedNonBombs = 0;
        const totalNonBombs = 100 - 10; // 10x10 –ø–æ–ª–µ —Å 10 –º–∏–Ω–∞–º–∏

        cells.forEach(cell => {
            if (cell.classList.contains('revealed') && !cell.dataset.isBomb) {
                revealedNonBombs++;
            }
        });

        if (revealedNonBombs === totalNonBombs) {
            alert('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –ù–∞–∂–º–∏—Ç–µ "Start" –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.');
            resetGame();
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã
    function resetGame() {
        gameContainer.style.display = 'none';
        startMenu.style.display = 'block';
        gameField.innerHTML = '';
        score.textContent = '–°—á—ë—Ç: 0';
    }
});
