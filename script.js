// –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ Telegram WebApp
function waitForTelegram() {
    return new Promise((resolve) => {
        const checkTelegram = setInterval(() => {
            if (window.Telegram && window.Telegram.WebApp) {
                clearInterval(checkTelegram);
                resolve();
            }
        }, 100);
    });
}

waitForTelegram().then(() => {
    console.log("Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    const startButton = document.getElementById('start-button');
    const startMenu = document.getElementById('start-menu');
    const minesweeperLaunch = document.getElementById('minesweeper-launch');
    const ratingLaunch = document.getElementById('rating-launch');
    const gameContainer = document.getElementById('game-container');
    const gameField = document.getElementById('gameField');
    const scoreElement = document.getElementById('score');
    const taskbar = document.getElementById('taskbar');
    const ratingContainer = document.getElementById('rating-container');
    const ratingBody = document.getElementById('rating-body');
    const closeRating = document.getElementById('close-rating');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    let totalScore = 0;
    let gameActive = false;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    taskbar.style.display = 'flex';
    startMenu.style.display = 'none';
    gameContainer.style.display = 'none';
    ratingContainer.style.display = 'none';

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ Telegram
    const user = window.Telegram.WebApp.initDataUnsafe?.user;
    const playerName = user?.username || user?.first_name || '–ê–Ω–æ–Ω–∏–º';
    const userId = user?.id || 'default_user';
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', { userId, playerName });

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase
    function loadScoreFromFirebase() {
        const scoreRef = window.firebaseFunctions.ref(window.db, `scores/${userId}`);
        window.firebaseFunctions.get(scoreRef).then((snapshot) => {
            console.log('–î–∞–Ω–Ω—ã–µ –∏–∑ Firebase:', snapshot.val());
            if (snapshot.exists()) {
                const data = snapshot.val();
                totalScore = Number(data.score) || 0; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á–∏—Å–ª–æ
            } else {
                totalScore = 0; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0, –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç
                // –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                window.firebaseFunctions.set(scoreRef, { score: 0, name: playerName }).then(() => {
                    console.log('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫ –≤ Firebase:', userId);
                }).catch((error) => {
                    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ Firebase:', error);
                });
            }
            updateScoreDisplay();
        }).catch((error) => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—á—ë—Ç–∞ –∏–∑ Firebase:', error);
            totalScore = 0;
            updateScoreDisplay();
        });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Firebase
    function saveScoreToFirebase() {
        const scoreRef = window.firebaseFunctions.ref(window.db, `scores/${userId}`);
        window.firebaseFunctions.update(scoreRef, { score: totalScore, name: playerName }).catch((error) => {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á—ë—Ç–∞ –≤ Firebase:', error);
        });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á—ë—Ç–∞
    function updateScoreDisplay() {
        scoreElement.textContent = `–°—á—ë—Ç: ${totalScore}`;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    function loadAndDisplayRating() {
        const scoresRef = window.firebaseFunctions.ref(window.db, 'scores');
        const scoresQuery = window.firebaseFunctions.query(scoresRef, window.firebaseFunctions.orderByChild('score'), window.firebaseFunctions.limitToLast(10)); // –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤
        window.firebaseFunctions.get(scoresQuery).then((snapshot) => {
            if (snapshot.exists()) {
                const scores = Object.entries(snapshot.val()).map(([id, data]) => ({
                    name: data.name || `–ò–≥—Ä–æ–∫ ${id}`,
                    score: Number(data.score) || 0 // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á–∏—Å–ª–æ
                })).sort((a, b) => b.score - a.score);

                ratingBody.innerHTML = '';
                scores.forEach((player, index) => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${index + 1}</td>
                        <td>${player.name}</td>
                        <td>${player.score}</td>
                    `;
                    ratingBody.appendChild(row);
                });
            }
        }).catch((error) => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–∑ Firebase:', error);
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Start"
    startButton.addEventListener('click', () => {
        startMenu.style.display = startMenu.style.display === 'block' ? 'none' : 'block';
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–∞–ø—ë—Ä"
    minesweeperLaunch.addEventListener('click', () => {
        startMenu.style.display = 'none';
        gameContainer.style.display = 'block';
        gameActive = true;
        initializeGame();
        loadScoreFromFirebase(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–µ–π—Ç–∏–Ω–≥"
    ratingLaunch.addEventListener('click', () => {
        if (gameActive) {
            gameContainer.style.display = 'none';
        } else {
            startMenu.style.display = 'none';
        }
        ratingContainer.style.display = 'block';
        loadAndDisplayRating();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä—ã—Ç—å" –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
    closeRating.addEventListener('click', () => {
        ratingContainer.style.display = 'none';
        if (gameActive) {
            gameContainer.style.display = 'block';
        } else {
            startMenu.style.display = 'block';
        }
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
    function initializeGame() {
        gameField.innerHTML = '';
        const rows = 8;
        const cols = 8;
        const totalCells = rows * cols;
        const bombCount = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –º–∏–Ω
        const bombs = new Set();
        while (bombs.size < bombCount) {
            bombs.add(Math.floor(Math.random() * totalCells));
        }

        // –°–æ–∑–¥–∞—ë–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        for (let i = 0; i < rows; i++) {
            for (let j = 0; j < cols; j++) {
                const cell = document.createElement('div');
                cell.className = 'cell';
                cell.dataset.row = i;
                cell.dataset.col = j;
                const cellIndex = i * cols + j;

                if (bombs.has(cellIndex)) {
                    cell.dataset.isBomb = true;
                }

                cell.addEventListener('click', handleCellClick);
                cell.addEventListener('contextmenu', handleRightClick); // –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π
                cell.addEventListener('touchstart', handleTouchStart); // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                gameField.appendChild(cell);
            }
        }

        gameField.style.gridTemplateColumns = `repeat(${cols}, 32px)`;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ (–ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞)
    function handleCellClick(event) {
        event.preventDefault();
        const cell = event.target;
        if (cell.classList.contains('revealed') || cell.classList.contains('flagged')) return;

        cell.classList.add('revealed');

        if (cell.dataset.isBomb) {
            cell.classList.add('bomb');
            cell.textContent = 'üí£';
            alert('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ù–∞–∂–º–∏—Ç–µ "Start" –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.');
            gameActive = false;
            revealAllBombs();
            saveScoreToFirebase(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—á—ë—Ç –ø–æ—Å–ª–µ –∏–≥—Ä—ã
        } else {
            const row = parseInt(cell.dataset.row);
            const col = parseInt(cell.dataset.col);
            let bombCount = countNeighborBombs(row, col);

            if (bombCount > 0) {
                cell.textContent = bombCount;
            }

            // –ù–∞—á–∏—Å–ª—è–µ–º 10 –æ—á–∫–æ–≤ –∑–∞ –∫–∞–∂–¥—É—é –æ—Ç–∫—Ä—ã—Ç—É—é —è—á–µ–π–∫—É –±–µ–∑ –±–æ–º–±—ã
            totalScore += 10;
            updateScoreDisplay();
            checkWin();
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞)
    function handleRightClick(event) {
        event.preventDefault();
        const cell = event.target;
        if (cell.classList.contains('revealed')) return;

        if (cell.classList.contains('flagged')) {
            cell.classList.remove('flagged');
            cell.textContent = '';
        } else {
            cell.classList.add('flagged');
            cell.textContent = 'üö©';
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Å–∞–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    function handleTouchStart(event) {
        event.preventDefault();
        const cell = event.target;
        if (event.touches.length === 2) { // –î–≤–∞ –∫–∞—Å–∞–Ω–∏—è ‚Äî —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞
            handleRightClick(event);
        } else {
            handleCellClick(event);
        }
    }

    // –ü–æ–¥—Å—á—ë—Ç –º–∏–Ω –≤–æ–∫—Ä—É–≥ —è—á–µ–π–∫–∏
    function countNeighborBombs(row, col) {
        let bombCount = 0;
        const rows = 8;
        const cols = 8;

        for (let i = -1; i <= 1; i++) {
            for (let j = -1; j <= 1; j++) {
                const newRow = row + i;
                const newCol = col + j;
                if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols) {
                    const neighbor = document.querySelector(`[data-row="${newRow}"][data-col="${newCol}"]`);
                    if (neighbor && neighbor.dataset.isBomb) {
                        bombCount++;
                    }
                }
            }
        }
        return bombCount;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É
    function checkWin() {
        const cells = document.querySelectorAll('.cell');
        let revealedNonBombs = 0;
        const totalNonBombs = 64 - 10; // 8x8 –ø–æ–ª–µ —Å 10 –º–∏–Ω–∞–º–∏

        cells.forEach(cell => {
            if (cell.classList.contains('revealed') && !cell.dataset.isBomb) {
                revealedNonBombs++;
            }
        });

        if (revealedNonBombs === totalNonBombs) {
            alert('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –ù–∞–∂–º–∏—Ç–µ "Start" –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.');
            totalScore += 100; // –î–æ–±–∞–≤–ª—è–µ–º 100 –æ—á–∫–æ–≤ –∑–∞ –ø–æ–±–µ–¥—É
            gameActive = false;
            updateScoreDisplay();
            saveScoreToFirebase();
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∏–Ω—ã –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
    function revealAllBombs() {
        const cells = document.querySelectorAll('.cell');
        cells.forEach(cell => {
            if (cell.dataset.isBomb) {
                cell.classList.add('revealed', 'bomb');
                cell.textContent = 'üí£';
            }
        });
    }

    // –°–±—Ä–æ—Å –∏–≥—Ä—ã
    function resetGame() {
        gameContainer.style.display = 'none';
        startMenu.style.display = 'block';
        gameField.innerHTML = '';
        gameActive = false;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—á—ë—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    loadScoreFromFirebase();
}).catch(error => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:', error);
});
